When creating Python files, use Python 3.13 features with type annotation,
following the latest PEP standards for type annotations (e.g., PEP 604, PEP 563,
PEP 585, PEP 649), pathlib for file manipulation, pytest for testing, and
include argparse for command-line argument parsing. Use NumPy-style docstrings
for function and module documentation. Ensure the code is structured, readable,
and adheres to best practices for Python 3.13.

Use assignment expressions (PEP 572) where appropriate. Use structural pattern
matching (PEP 634) in place of if/else chains and use of isinstance()
predicates.

Use PEP 735 for specifying dependencies in `pyproject.toml`

For reference, the PEP standards included are:

    PEP 604: Allowing X | Y as a shorthand for Union[X, Y]
    PEP 563: Postponed evaluation of annotations (from __future__ import
             annotations).
    PEP 572: Use of assignment expressions (`foo := bar + 1`)
    PEP 585: Built-in generic types like list[int] and dict[str, int].
    PEP 634: Structural pattern matching statements (match/case syntax)
    PEP 649: Deferred evaluation of annotations
    PEP 735: Use of `dependency-groups` table in `pyproject.toml`